{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Mongo-sugar","tagline":"Syntactic Sugar for Official MongoDB Driver","google":"UA-22321935-9","body":"Mongo Sugar [![Build Status](https://secure.travis-ci.org/endel/mongo-sugar.png)](http://travis-ci.org/endel/mongo-sugar)\r\n===\r\n\r\nProvide a syntatic sugar for official MongoDB ruby driver, similar to an ORM.\r\n\r\nBut it isn't another ORM. If you need relationship features, you should use\r\n[MongoID](http://mongoid.org/), [MongoMapper](http://mongomapper.com/), or, why\r\nnot - a relational database.\r\n\r\nUsage\r\n===\r\n\r\nAdd mongo-sugar to your gemfile:\r\n\r\n    gem 'mongo-sugar'\r\n\r\nRequire it on your code:\r\n\r\n    require 'mongo-sugar'\r\n\r\nDefine classes as collections. By default, collection names are the class name\r\nunderscored. On the following example, the collection name is `my_collection`.\r\n\r\n    class MyCollection < Mongo::Sugar::Collection\r\n      #\r\n      # Define your custom methods, like this:\r\n      #\r\n      def do_upsert(hash)\r\n        @collection.update({\r\n          key: hash[:key]\r\n        }, {\r\n          :$addToSet => {\r\n            :value => hash[:value]\r\n          }\r\n        }, :upsert => true)\r\n      end\r\n    end\r\n\r\nYou can customize the collection names using `store_in`, which is similar to mongoid\r\nsyntax.\r\n\r\n    class MyCollection < Mongo::Sugar::Collection\r\n      store_in :collection => 'custom_collection'\r\n    end\r\n\r\nFor more details, read the [documentation](http://rubydoc.info/github/endel/mongo-sugar/master/frames) here.\r\n\r\nLicense\r\n===\r\n\r\nThis library is released under MIT License. Please see LICENSE file.\r\n"}